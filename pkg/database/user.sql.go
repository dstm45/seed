// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
)

const getPasswordHash = `-- name: GetPasswordHash :one
SELECT password_hash from users WHERE email = ?
`

func (q *Queries) GetPasswordHash(ctx context.Context, email string) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getPasswordHashStmt, getPasswordHash, email)
	var password_hash sql.NullString
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, nom, postnom, prenom, type_compte, id_region, id_stock, email, password_hash from users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Postnom,
		&i.Prenom,
		&i.TypeCompte,
		&i.IDRegion,
		&i.IDStock,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const getUserId = `-- name: GetUserId :one
SELECT id, nom, postnom, prenom, type_compte, id_region, id_stock, email, password_hash from users WHERE id = ?
`

func (q *Queries) GetUserId(ctx context.Context, id uint64) (User, error) {
	row := q.queryRow(ctx, q.getUserIdStmt, getUserId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Postnom,
		&i.Prenom,
		&i.TypeCompte,
		&i.IDRegion,
		&i.IDStock,
		&i.Email,
		&i.PasswordHash,
	)
	return i, err
}

const newUser = `-- name: NewUser :exec
INSERT INTO users (nom, postnom, prenom, email, password_hash)VALUES(?, ?, ?, ?, ?)
`

type NewUserParams struct {
	Nom          sql.NullString `json:"nom"`
	Postnom      sql.NullString `json:"postnom"`
	Prenom       sql.NullString `json:"prenom"`
	Email        string         `json:"email"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.exec(ctx, q.newUserStmt, newUser,
		arg.Nom,
		arg.Postnom,
		arg.Prenom,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}
