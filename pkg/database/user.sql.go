// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
  id, nom, prenom, email, type_compte, password_hash, pseudonyme, description, chemin_photo, uuid, online_status 
FROM 
  users 
WHERE 
  email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Prenom,
		&i.Email,
		&i.TypeCompte,
		&i.PasswordHash,
		&i.Pseudonyme,
		&i.Description,
		&i.CheminPhoto,
		&i.Uuid,
		&i.OnlineStatus,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
  id, nom, prenom, email, type_compte, password_hash, pseudonyme, description, chemin_photo, uuid, online_status 
FROM 
  users 
WHERE 
  id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Prenom,
		&i.Email,
		&i.TypeCompte,
		&i.PasswordHash,
		&i.Pseudonyme,
		&i.Description,
		&i.CheminPhoto,
		&i.Uuid,
		&i.OnlineStatus,
	)
	return i, err
}

const newUser = `-- name: NewUser :one
INSERT INTO 
  users (nom, prenom, email, password_hash, pseudonyme)
VALUES
  ($1, $2, $3, $4, $5)
RETURNING id, nom, prenom, email, type_compte, password_hash, pseudonyme, description, chemin_photo, uuid, online_status
`

type NewUserParams struct {
	Nom          pgtype.Text `json:"nom"`
	Prenom       pgtype.Text `json:"prenom"`
	Email        pgtype.Text `json:"email"`
	PasswordHash pgtype.Text `json:"password_hash"`
	Pseudonyme   pgtype.Text `json:"pseudonyme"`
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) (User, error) {
	row := q.db.QueryRow(ctx, newUser,
		arg.Nom,
		arg.Prenom,
		arg.Email,
		arg.PasswordHash,
		arg.Pseudonyme,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Prenom,
		&i.Email,
		&i.TypeCompte,
		&i.PasswordHash,
		&i.Pseudonyme,
		&i.Description,
		&i.CheminPhoto,
		&i.Uuid,
		&i.OnlineStatus,
	)
	return i, err
}

const updateDescription = `-- name: UpdateDescription :exec
UPDATE users 
SET 
  nom = $1,
  prenom=$2,
  description=$3,
  chemin_photo=$4,
  pseudonyme=$5
WHERE 
  email=$6
`

type UpdateDescriptionParams struct {
	Nom         pgtype.Text `json:"nom"`
	Prenom      pgtype.Text `json:"prenom"`
	Description pgtype.Text `json:"description"`
	CheminPhoto pgtype.Text `json:"chemin_photo"`
	Pseudonyme  pgtype.Text `json:"pseudonyme"`
	Email       pgtype.Text `json:"email"`
}

func (q *Queries) UpdateDescription(ctx context.Context, arg UpdateDescriptionParams) error {
	_, err := q.db.Exec(ctx, updateDescription,
		arg.Nom,
		arg.Prenom,
		arg.Description,
		arg.CheminPhoto,
		arg.Pseudonyme,
		arg.Email,
	)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE 
  users
SET 
  password_hash = $1
WHERE 
  email=$2
`

type UpdatePasswordParams struct {
	PasswordHash pgtype.Text `json:"password_hash"`
	Email        pgtype.Text `json:"email"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.PasswordHash, arg.Email)
	return err
}
