// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPasswordHash = `-- name: GetPasswordHash :one
SELECT password_hash from users WHERE email = $1
`

func (q *Queries) GetPasswordHash(ctx context.Context, email pgtype.Text) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getPasswordHash, email)
	var password_hash pgtype.Text
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, nom, prenom, email, type_compte, password_hash from users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Prenom,
		&i.Email,
		&i.TypeCompte,
		&i.PasswordHash,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, nom, prenom, email, type_compte, password_hash from users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nom,
		&i.Prenom,
		&i.Email,
		&i.TypeCompte,
		&i.PasswordHash,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, nom, prenom, email, type_compte, password_hash from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Nom,
			&i.Prenom,
			&i.Email,
			&i.TypeCompte,
			&i.PasswordHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newUser = `-- name: NewUser :exec
INSERT INTO users (nom, prenom, email, password_hash)
VALUES($1, $2, $3, $4)
`

type NewUserParams struct {
	Nom          pgtype.Text `json:"nom"`
	Prenom       pgtype.Text `json:"prenom"`
	Email        pgtype.Text `json:"email"`
	PasswordHash pgtype.Text `json:"password_hash"`
}

func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.db.Exec(ctx, newUser,
		arg.Nom,
		arg.Prenom,
		arg.Email,
		arg.PasswordHash,
	)
	return err
}
